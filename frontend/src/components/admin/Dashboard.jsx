import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import adminService from '../../services/adminService';
import './Admin.css';

// Chart.js –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
import {
  Chart as ChartJS,
  ArcElement,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import { Pie, Bar } from 'react-chartjs-2';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Chart.js
ChartJS.register(
  ArcElement,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

function AdminDashboard() {
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const statsData = await adminService.getStats();
        setStats(statsData);
      } catch (error) {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        console.error(error);
      } finally {
        setLoading(false);
      }
    };

    fetchStats();
  }, []);

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –±—Ä–µ–Ω–¥–æ–≤
  const prepareBrandsChartData = () => {
    if (!stats || !stats.brands) return null;

    const brands = Object.keys(stats.brands);
    const counts = Object.values(stats.brands);

    return {
      labels: brands,
      datasets: [
        {
          label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π',
          data: counts,
          backgroundColor: [
            'rgba(255, 99, 132, 0.6)',
            'rgba(54, 162, 235, 0.6)',
            'rgba(255, 206, 86, 0.6)',
            'rgba(75, 192, 192, 0.6)',
            'rgba(153, 102, 255, 0.6)',
            'rgba(255, 159, 64, 0.6)',
          ],
          borderColor: [
            'rgba(255, 99, 132, 1)',
            'rgba(54, 162, 235, 1)',
            'rgba(255, 206, 86, 1)',
            'rgba(75, 192, 192, 1)',
            'rgba(153, 102, 255, 1)',
            'rgba(255, 159, 64, 1)',
          ],
          borderWidth: 1,
        },
      ],
    };
  };

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const prepareUsersChartData = () => {
    if (!stats) return null;

    return {
      labels: ['–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'],
      datasets: [
        {
          data: [
            stats.active_users - stats.admin_users, 
            stats.total_users - stats.active_users,
            stats.admin_users
          ],
          backgroundColor: [
            'rgba(75, 192, 192, 0.6)',
            'rgba(255, 99, 132, 0.6)',
            'rgba(54, 162, 235, 0.6)',
          ],
          borderColor: [
            'rgba(75, 192, 192, 1)',
            'rgba(255, 99, 132, 1)',
            'rgba(54, 162, 235, 1)',
          ],
          borderWidth: 1,
        },
      ],
    };
  };

  if (loading) {
    return (
      <div className="admin-loading">
        <div className="admin-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="admin-error">
        <h3>–û—à–∏–±–∫–∞</h3>
        <p>{error}</p>
        <button onClick={() => window.location.reload()} className="admin-btn">
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  return (
    <div className="admin-dashboard">
      <h1>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</h1>
      
      <div className="stats-cards">
        <div className="stat-card">
          <div className="stat-icon">üöó</div>
          <div className="stat-info">
            <h3>–ê–≤—Ç–æ–º–æ–±–∏–ª–∏</h3>
            <p className="stat-value">{stats.total_cars}</p>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">üë§</div>
          <div className="stat-info">
            <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
            <p className="stat-value">{stats.total_users}</p>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">‚úÖ</div>
          <div className="stat-info">
            <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
            <p className="stat-value">{stats.active_users}</p>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">üîë</div>
          <div className="stat-info">
            <h3>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</h3>
            <p className="stat-value">{stats.admin_users}</p>
          </div>
        </div>
      </div>
      
      <div className="charts-container">
        <div className="chart-card">
          <h3>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –±—Ä–µ–Ω–¥–∞–º</h3>
          <div className="chart-wrapper">
            {stats && stats.brands && (
              <Bar data={prepareBrandsChartData()} />
            )}
          </div>
        </div>
        
        <div className="chart-card">
          <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
          <div className="chart-wrapper">
            {stats && (
              <Pie data={prepareUsersChartData()} />
            )}
          </div>
        </div>
      </div>
      
      <div className="quick-links">
        <Link to="/admin/cars" className="admin-btn">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏</Link>
        <Link to="/admin/users" className="admin-btn">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</Link>
      </div>
    </div>
  );
}

export default AdminDashboard;
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import adminService from '../../services/adminService';
import './Admin.css';

function CarsManagement() {
  const [cars, setCars] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentCar, setCurrentCar] = useState(null);
  const [formData, setFormData] = useState({
    brand: '',
    model: '',
    year: '',
    price: '',
    engine: '',
    transmission: '',
    color: '',
    body_type: '',
    drivetrain: '',
    description: '',
    features: [],
    image: ''
  });
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    fetchCars();
  }, []);

  const fetchCars = async () => {
    try {
      setLoading(true);
      const data = await adminService.getAllCars();
      setCars(data);
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π');
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  const handleOpenModal = (car = null) => {
    if (car) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º features –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const featuresString = car.features ? car.features.join(', ') : '';
      setFormData({
        ...car,
        features: featuresString
      });
      setCurrentCar(car);
    } else {
      setFormData({
        brand: '',
        model: '',
        year: '',
        price: '',
        engine: '',
        transmission: '',
        color: '',
        body_type: '',
        drivetrain: '',
        description: '',
        features: '',
        image: ''
      });
      setCurrentCar(null);
    }
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setCurrentCar(null);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É features –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤
      const processedData = {
        ...formData,
        year: parseInt(formData.year),
        price: parseFloat(formData.price),
        features: formData.features.split(',').map(item => item.trim())
      };

      let result;
      if (currentCar) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        result = await adminService.updateCar(currentCar.id, processedData);
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        result = await adminService.createCar(processedData);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
      fetchCars();
      handleCloseModal();
      alert(currentCar ? '–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω' : '–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
  };

  const handleDelete = async (carId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å?')) {
      try {
        await adminService.deleteCar(carId);
        fetchCars();
        alert('–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
      }
    }
  };

  const filteredCars = cars.filter(car => 
    car.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||
    car.model.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (loading && !cars.length) {
    return (
      <div className="admin-loading">
        <div className="admin-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
      </div>
    );
  }

  return (
    <div className="admin-container">
      <div className="admin-header">
        <h1>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏</h1>
        <div className="admin-actions">
          <Link to="/admin" className="admin-btn secondary">–ù–∞–∑–∞–¥ –∫ –¥–∞—à–±–æ—Ä–¥—É</Link>
          <button className="admin-btn" onClick={() => handleOpenModal()}>
            –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
          </button>
        </div>
      </div>

      <div className="admin-search">
        <input
          type="text"
          placeholder="–ü–æ–∏—Å–∫ –ø–æ –±—Ä–µ–Ω–¥—É –∏–ª–∏ –º–æ–¥–µ–ª–∏..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="admin-search-input"
        />
      </div>

      {error && <div className="admin-error-message">{error}</div>}

      <div className="admin-table-container">
        <table className="admin-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</th>
              <th>–ë—Ä–µ–Ω–¥</th>
              <th>–ú–æ–¥–µ–ª—å</th>
              <th>–ì–æ–¥</th>
              <th>–¶–µ–Ω–∞</th>
              <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {filteredCars.map(car => (
              <tr key={car.id}>
                <td>{car.id}</td>
                <td>
                  <img 
                    src={car.image} 
                    alt={`${car.brand} ${car.model}`} 
                    className="admin-table-image"
                  />
                </td>
                <td>{car.brand}</td>
                <td>{car.model}</td>
                <td>{car.year}</td>
                <td>${car.price?.toLocaleString()}</td>
                <td className="admin-actions-cell">
                  <button 
                    className="admin-btn icon-btn edit"
                    onClick={() => handleOpenModal(car)}
                    title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                  >
                    ‚úèÔ∏è
                  </button>
                  <button 
                    className="admin-btn icon-btn delete"
                    onClick={() => handleDelete(car.id)}
                    title="–£–¥–∞–ª–∏—Ç—å"
                  >
                    üóëÔ∏è
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {isModalOpen && (
        <div className="admin-modal-overlay">
          <div className="admin-modal">
            <div className="admin-modal-header">
              <h2>{currentCar ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å' : '–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å'}</h2>
              <button className="admin-modal-close" onClick={handleCloseModal}>√ó</button>
            </div>
            <form onSubmit={handleSubmit} className="admin-form">
              <div className="admin-form-grid">
                <div className="form-group">
                  <label>–ë—Ä–µ–Ω–¥</label>
                  <input
                    type="text"
                    name="brand"
                    value={formData.brand}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>–ú–æ–¥–µ–ª—å</label>
                  <input
                    type="text"
                    name="model"
                    value={formData.model}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>–ì–æ–¥</label>
                  <input
                    type="number"
                    name="year"
                    value={formData.year}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>–¶–µ–Ω–∞</label>
                  <input
                    type="number"
                    name="price"
                    value={formData.price}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>–î–≤–∏–≥–∞—Ç–µ–ª—å</label>
                  <input
                    type="text"
                    name="engine"
                    value={formData.engine}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è</label>
                  <input
                    type="text"
                    name="transmission"
                    value={formData.transmission}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>–¶–≤–µ—Ç</label>
                  <input
                    type="text"
                    name="color"
                    value={formData.color}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>–¢–∏–ø –∫—É–∑–æ–≤–∞</label>
                  <input
                    type="text"
                    name="body_type"
                    value={formData.body_type}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>–ü—Ä–∏–≤–æ–¥</label>
                  <input
                    type="text"
                    name="drivetrain"
                    value={formData.drivetrain}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</label>
                  <input
                    type="text"
                    name="image"
                    value={formData.image}
                    onChange={handleInputChange}
                    required
                  />
                </div>
              </div>
              
              <div className="form-group full-width">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea
                  name="description"
                  value={formData.description}
                  onChange={handleInputChange}
                  required
                  rows="4"
                ></textarea>
              </div>
              
              <div className="form-group full-width">
                <label>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</label>
                <textarea
                  name="features"
                  value={formData.features}
                  onChange={handleInputChange}
                  required
                  rows="4"
                ></textarea>
              </div>
              
              <div className="admin-form-actions">
                <button type="button" className="admin-btn secondary" onClick={handleCloseModal}>
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button type="submit" className="admin-btn">
                  {currentCar ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

export default CarsManagement;